# ===============================
# = Application Setting
# ===============================
app.hellomsg=Hello User!!!
app.setting.dashboard.topLimit=5
app.setting.dateFormat=dd/MM/yyyy
app.setting.tmpFileUploadDir=D:/tmp/accker/tmpFileUpload/
app.setting.fileUploadDir=D:/tmp/accker/fileUpload/


# ===============================
# = Date Format Display Setting
# ===============================
dateformat.display.date=dd/MM/yyyy
dateformat.display.datetime=dd/MM/yyyy HH:mm:ss
dateformat.display.monthyear=MMM yyyy
dateformat.display.daymonth=dd MMM


# ===============================
# = Attachment file Setting
# ===============================
# default character encoding to use for parsing requests, to be applied to headers of individual parts and to form fields
attachment.file.defaultEncoding=UTF-8

# temporary directory where uploaded files get stored (note: relative path)
attachment.file.uploadTempDir=upload/temp

# maximum allowed size (in bytes) before an upload gets rejected 
attachment.file.maxUploadSize=5242880

# maximum allowed size (in bytes) before uploads are written to disk
attachment.file.maxInMemorySize=10240

# maximum allowed size (in bytes) for each individual file before an upload gets rejected
attachment.file.maxUploadSizePerFile=5242880

# resolve the multipart request lazily at the time of file or parameter access
attachment.file.resolveLazily=true


# ===============================
# = Database Connection setting
# ===============================
# connection type options: jdbc|connectionpool|jndi
db.connection.type=jdbc
db.datasource.driverClassName=com.mysql.jdbc.Driver
db.datasource.url=jdbc:mysql://localhost:3306/accker
db.datasource.username=root
db.datasource.password=p@ssw0rd

# initial number of connections that are created when the pool is started (Default = 0)
db.dbcp.initialSize=1

# maximum total number of idle and borrows connections that can be active at the same time. Use a negative value for no limit (Default = 8)
db.dbcp.maxTotal=8

# maximum number of connections that can remain idle in the pool, without extra ones being released, or negative for no limit (Default = 8)
db.dbcp.maxIdle=3

# minimum number of connections that can remain idle in the pool, without extra ones being created, or zero to create none (Default = 0)
db.dbcp.minIdle=2

# maximum number of milliseconds that the pool will wait (when there are no available connections) 
# for a connection to be returned before throwing an exception, or -1 to wait indefinitely (Default = -1)
db.dbcp.maxWaitMillis=-1

# maximum number of open statements that can be allocated from the statement pool at the same time, or negative for no limit (Default = -1)
db.dbcp.maxOpenPreparedStatements=100

# Flag to remove abandoned connections if they exceed the removeAbandonedTimout
# A connection is considered abandoned and eligible for removal if it has not been used for longer than removeAbandonedTimeout.
# Creating a Statement, PreparedStatement or CallableStatement or using one of these to execute a query (using one of the execute methods) resets the lastUsed property of the parent connection.
# Setting one or both of these to true can recover db connections from poorly written applications which fail to close connections.
# Setting removeAbandonedOnMaintenance to true removes abandoned connections on the maintenance cycle (when eviction ends). 
# This property has no effect unless maintenance is enabled by setting timeBetweenEvictionRunsMillis to a positive value. 
# If removeAbandonedOnBorrow is true, abandoned connections are removed each time a connection is borrowed from the pool, with the additional requirements that
# -- getNumActive() > getMaxTotal() - 3; and
# -- getNumIdle() < 2
db.dbcp.removeAbandonedOnBorrow=false
db.dbcp.removeAbandonedOnMaintenance=false

# Timeout in seconds before an abandoned connection can be removed (default = 300)
db.dbcp.removeAbandonedTimeout=300

# Indication of whether objects will be validated after creation. 
# If the object fails to validate, the borrow attempt that triggered the object creation will fail. (Default = false)
db.dbcp.testOnCreate=false

# Indication of whether objects will be validated before being borrowed from the pool. 
# If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another. (Default = true) 
db.dbcp.testOnBorrow=true

# Indication of whether objects will be validated before being returned to the pool (Default = false)
db.dbcp.testOnReturn=false
 
# Indication of whether objects will be validated by the idle object evictor (if any). 
# If an object fails to validate, it will be dropped from the pool. (Default = false)
db.dbcp.testWhileIdle=false

# SQL query that will be used to validate connections from this pool before returning them to the caller
db.dbcp.validationQuery=SELECT 1

# Timeout in seconds before connection validation queries fail (Default = -1)
db.dbcp.validationQueryTimeout=-1

# jndi name for database connection defined in application server
db.jndi.name=jdbc/mysql






